{"version":3,"file":"static/js/566.d3b6582d.chunk.js","mappings":"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","sources":["hooks/useDebounce.js","components/CroppedImage.js","components/Recipe.js","components/TechLevelFilter.js","utils/recipeSearch.js","components/RecipeList.js","utils/formatting.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Custom hook that debounces a value.\r\n * @param value The value to debounce.\r\n * @param delay The debounce delay in milliseconds.\r\n * @returns The debounced value.\r\n */\r\nfunction useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Update debounced value after the specified delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n\r\n            // Cleanup function to clear the timeout if value or delay changes\r\n            // This is how we prevent debounced value from updating if value is changed\r\n            // within the delay period. Timeout gets cleared and restarted.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport { useDebounce }; // Export the hook ","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { AtlasContext } from '../context';\r\nimport { ATLAS_IMAGE_BASE_PATH } from '../config/atlasConfig';\r\n\r\nimport './CroppedImage.css';\r\n\r\nconst CroppedImage = ({ atlasName, displayName, tooltipContent }) => {\r\n    const { inventoryAtlas } = useContext(AtlasContext);\r\n    const atlasEntry = inventoryAtlas[atlasName];\r\n    const [isHovering, setIsHovering] = useState(false);\r\n    const [tooltipPosition, setTooltipPosition] = useState({ top: 0, left: 0 });\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [imageDimensions, setImageDimensions] = useState({ width: 63, height: 63 });\r\n    const canvasRef = useRef(null);\r\n    const wrapperRef = useRef(null);\r\n    const tooltipTarget = useRef(null);\r\n\r\n    useEffect(() => {\r\n        tooltipTarget.current = document.getElementById('tooltip-root');\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!atlasEntry) return;\r\n\r\n        const img = new Image();\r\n        const u1 = atlasEntry.u1;\r\n        const u2 = atlasEntry.u2;\r\n        const v1 = atlasEntry.v1;\r\n        const v2 = atlasEntry.v2;\r\n        const pngSrc = `${ATLAS_IMAGE_BASE_PATH}${atlasEntry.texture}`;\r\n\r\n        const drawImage = () => {\r\n            const canvas = canvasRef.current;\r\n            if (!canvas) return;\r\n\r\n            const ctx = canvas.getContext('2d');\r\n            const imgWidth = img.naturalWidth;\r\n            const imgHeight = img.naturalHeight;\r\n            const sx = u1 * imgWidth;\r\n            const sy = (1 - v2) * imgHeight;\r\n            const sWidth = Math.max(1, (u2 - u1) * imgWidth);\r\n            const sHeight = Math.max(1, (v2 - v1) * imgHeight);\r\n\r\n            canvas.width = sWidth;\r\n            canvas.height = sHeight;\r\n            setImageDimensions({ width: sWidth, height: sHeight });\r\n\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(\r\n                img,\r\n                sx, sy, sWidth, sHeight,\r\n                0, 0, canvas.width, canvas.height\r\n            );\r\n            setImageLoaded(true);\r\n        };\r\n\r\n        img.onload = drawImage;\r\n        img.onerror = () => {\r\n            console.error(`Failed to load image: ${pngSrc}`);\r\n            setImageLoaded(false);\r\n        };\r\n        img.src = process.env.PUBLIC_URL + pngSrc;\r\n\r\n        return () => {\r\n            img.onload = null;\r\n            img.onerror = null;\r\n        };\r\n    }, [atlasEntry]);\r\n\r\n    const handleMouseEnter = (event) => {\r\n        setIsHovering(true);\r\n        const rect = event.currentTarget.getBoundingClientRect();\r\n        setTooltipPosition({\r\n            top: rect.top + window.scrollY - 10,\r\n            left: rect.left + window.scrollX + (rect.width / 2)\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovering(false);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            ref={wrapperRef}\r\n            className=\"cropped-image-wrapper\"\r\n            style={{\r\n                width: `${imageDimensions.width}px`,\r\n                height: `${imageDimensions.height}px`\r\n            }}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <canvas\r\n                ref={canvasRef}\r\n                className={`cropped-image-canvas ${imageLoaded ? 'loaded' : ''}`}\r\n            />\r\n            {!imageLoaded && imageDimensions.width > 1 && (\r\n                <div className=\"loading-placeholder\"></div>\r\n            )}\r\n            {isHovering && tooltipTarget.current && createPortal(\r\n                <div className=\"image-tooltip\" style={{\r\n                    top: `${tooltipPosition.top}px`,\r\n                    left: `${tooltipPosition.left}px`,\r\n                }}>\r\n                    {tooltipContent ? tooltipContent : (displayName || 'Name missing?')}\r\n                </div>,\r\n                tooltipTarget.current\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CroppedImage;","import React, { useContext } from 'react';\r\nimport CroppedImage from './CroppedImage';\r\nimport './Recipe.css';\r\nimport { TECH_LEVELS } from '../config/atlasConfig';\r\nimport { AtlasContext } from '../context';\r\n\r\nconst Recipe = ({ recipe }) => {\r\n    const { recipes } = useContext(AtlasContext);\r\n\r\n    const findIngredientRecipe = (ingredient) => {\r\n        return recipes.find(r => r.prefab === ingredient.prefab);\r\n    };\r\n\r\n    return (\r\n        <div className=\"recipe\">\r\n            <div className=\"result-item\">\r\n                <CroppedImage\r\n                    atlasName={recipe.prefab}\r\n                    displayName={recipe.name}\r\n                />\r\n            </div>\r\n            <span className=\"equals\">=</span>\r\n            <div className=\"ingredients\">\r\n                {recipe.ingredients.length > 0 ? (\r\n                    recipe.ingredients.map((ingredient) => (\r\n                        <div className=\"ingredient-item\" key={ingredient.prefab}>\r\n                            <CroppedImage\r\n                                atlasName={ingredient.prefab}\r\n                                displayName={ingredient.name}\r\n                                tooltipContent={\r\n                                    <div>\r\n                                        {findIngredientRecipe(ingredient)?.ingredients?.length > 0 ? (\r\n                                            <div style={{ display: 'flex', flexDirection: 'row', gap: '4px' }}>\r\n                                                {findIngredientRecipe(ingredient).ingredients.map((r) => (\r\n                                                    <div key={r.prefab} style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                        <CroppedImage\r\n                                                            atlasName={r.prefab}\r\n                                                            displayName={r.name}\r\n                                                        />\r\n                                                        {r.amount > 1 && (\r\n                                                            <span style={{ marginLeft: '2px' }}>x{r.amount}</span>\r\n                                                        )}\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>{ingredient.name.replace(/\\*/g, '')}</div>\r\n                                        )}\r\n                                    </div>\r\n                                }\r\n                            />\r\n                            {ingredient.amount > 1 && (\r\n                                <span className=\"amount\">{ingredient.amount}</span>\r\n                            )}\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <span className=\"no-ingredients\">(No ingredients listed)</span>\r\n                )}\r\n            </div>\r\n            {recipe.techLevels && Object.keys(recipe.techLevels).length > 0 && (\r\n                <div className=\"tech-levels\">\r\n                    {Object.entries(recipe.techLevels).map(([techLevel, level]) => {\r\n                        const tech = TECH_LEVELS.find(t => t.techLevel === techLevel && t.level === level);\r\n                        return (\r\n                            <span key={`${techLevel}-${level}`} className=\"tech-level\">\r\n                                {tech?.name || techLevel}\r\n                            </span>\r\n                        );\r\n                    })}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe; ","import React from 'react';\r\nimport Select from 'react-select';\r\nimport './TechLevelFilter.css';\r\n\r\nconst TechLevelFilter = ({ techs, selectedTech, setSelectedTech }) => {\r\n    const options = [\r\n        { value: '-0', label: 'All Tech Levels' },\r\n        ...techs.map(tech => ({\r\n            value: `${tech.techLevel}-${tech.level}`,\r\n            label: tech.name\r\n        }))\r\n    ];\r\n\r\n    const currentValue = options.find(\r\n        option => option.value === `${selectedTech.techLevel}-${selectedTech.level}`\r\n    ) || options[0];\r\n\r\n    return (\r\n        <div className=\"tech-level-filter\">\r\n            <Select\r\n                value={currentValue}\r\n                onChange={(option) => setSelectedTech(option.value)}\r\n                options={options}\r\n                className=\"tech-level-select\"\r\n                classNamePrefix=\"tech-select\"\r\n                isSearchable={false}\r\n                menuPlacement=\"auto\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TechLevelFilter; ","import { formatDisplayName } from './formatting';\r\n\r\n/**\r\n * Calculates a match score for a recipe based on the search term.\r\n * Lower score means better match.\r\n * @param {Object} recipe - The recipe object to score\r\n * @param {string} search - The search term\r\n * @returns {[number, number]} - [score, bestIngredientIndex]\r\n *   score: 0 = exact match on name/prefab\r\n *          1 = exact match on formatted name/prefab\r\n *          2 = partial match on name/prefab\r\n *          3 = partial match on formatted name/prefab\r\n *          4 = ingredient match\r\n *          9999 = no match\r\n *   bestIngredientIndex: index of best matching ingredient, or -1 if none\r\n */\r\nexport const getMatchScore = (recipe, search) => {\r\n    // Lower is better\r\n    const searchLower = search.toLowerCase();\r\n    // Recipe name/prefab\r\n    const name = (recipe.name || '').toLowerCase();\r\n    const prefab = (recipe.prefab || '').toLowerCase();\r\n    const nameDisplay = formatDisplayName(recipe.name || '').toLowerCase();\r\n    const prefabDisplay = formatDisplayName(recipe.prefab || '').toLowerCase();\r\n\r\n    // Check if any ingredient matches and get best matching ingredient\r\n    let bestIngredientScore = 9999;\r\n    let bestIngredientIndex = -1;\r\n    recipe.ingredients?.forEach((ing, index) => {\r\n        const ingName = (ing.name || '').toLowerCase();\r\n        const ingPrefab = (ing.prefab || '').toLowerCase();\r\n\r\n        // Score ingredient matches similar to recipe matches\r\n        let score = 9999;\r\n        if (ingName === searchLower || ingPrefab === searchLower) score = 0;\r\n        else if (ingName.includes(searchLower) || ingPrefab.includes(searchLower)) score = 2;\r\n\r\n        if (score < bestIngredientScore) {\r\n            bestIngredientScore = score;\r\n            bestIngredientIndex = index;\r\n        }\r\n    });\r\n\r\n    // Prioritize exact matches on name/prefab\r\n    if (name === searchLower || prefab === searchLower) return [0, bestIngredientIndex];\r\n    if (nameDisplay === searchLower || prefabDisplay === searchLower) return [1, bestIngredientIndex];\r\n\r\n    // Then partial matches on name/prefab\r\n    if (name.includes(searchLower) || prefab.includes(searchLower)) return [2, bestIngredientIndex];\r\n    if (nameDisplay.includes(searchLower) || prefabDisplay.includes(searchLower)) return [3, bestIngredientIndex];\r\n\r\n    // Then ingredient matches\r\n    if (bestIngredientScore < 9999) return [4, bestIngredientIndex];\r\n\r\n    return [9999, -1]; // No match\r\n};","import React, { useContext, useState, useMemo } from 'react';\r\nimport './RecipeList.css';\r\nimport { AtlasContext } from '../context';\r\nimport { useDebounce } from '../hooks/useDebounce';\r\nimport Recipe from './Recipe';\r\nimport TechLevelFilter from './TechLevelFilter';\r\nimport { getMatchScore } from '../utils/recipeSearch';\r\nimport { TECH_LEVELS } from '../config/atlasConfig';\r\n\r\nconst RecipeList = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const { recipes } = useContext(AtlasContext);\r\n    const [selectedTech, setSelectedTech] = useState({ techLevel: '', level: 0 });\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n    const handleTechLevelChange = (value) => {\r\n        const [techLevel, level] = value.split('-');\r\n        setSelectedTech({\r\n            techLevel,\r\n            level: parseInt(level)\r\n        });\r\n    };\r\n\r\n    const getModifiedRecipe = (recipe, bestIngredientIndex) => {\r\n        if (bestIngredientIndex <= 0 || !recipe.ingredients) return recipe;\r\n\r\n        const modifiedRecipe = { ...recipe };\r\n        modifiedRecipe.ingredients = [...recipe.ingredients];\r\n        const [matchedIngredient] = modifiedRecipe.ingredients.splice(bestIngredientIndex, 1);\r\n        modifiedRecipe.ingredients.unshift(matchedIngredient);\r\n        return modifiedRecipe;\r\n    };\r\n\r\n    const matchesFilters = (recipe, score) => {\r\n        const matchesTechLevel = !selectedTech.techLevel ||\r\n            (recipe.techLevels && recipe.techLevels[selectedTech.techLevel] === selectedTech.level);\r\n\r\n        const validSearch = debouncedSearchTerm.length >= 3 || selectedTech.techLevel || !debouncedSearchTerm;\r\n        const matchesSearch = !debouncedSearchTerm || score < 9999;\r\n\r\n        return matchesTechLevel && matchesSearch && validSearch;\r\n    };\r\n\r\n    const getNoResultsMessage = () => {\r\n        if (!selectedTech.techLevel && (!debouncedSearchTerm || debouncedSearchTerm.length < 3)) {\r\n            return \"Enter at least 3 characters to search recipes or select a tech level.\";\r\n        }\r\n        return \"No matching recipes found.\";\r\n    };\r\n\r\n    const filteredAndSortedRecipes = useMemo(() => {\r\n        if (!selectedTech.techLevel && !debouncedSearchTerm) return [];\r\n\r\n        return recipes\r\n            .map(recipe => {\r\n                const [score, bestIngredientIndex] = getMatchScore(recipe, debouncedSearchTerm);\r\n                const modifiedRecipe = getModifiedRecipe(recipe, bestIngredientIndex);\r\n                return { recipe: modifiedRecipe, score };\r\n            })\r\n            .filter(({ recipe, score }) => matchesFilters(recipe, score))\r\n            .sort((a, b) => {\r\n                if (a.score !== b.score) return a.score - b.score;\r\n                return (a.recipe.name || '').localeCompare(b.recipe.name || '');\r\n            })\r\n            .map(({ recipe }) => recipe);\r\n    }, [recipes, debouncedSearchTerm, selectedTech]);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"search-filters\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by name or prefab...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"search-input\"\r\n                />\r\n                <TechLevelFilter\r\n                    techs={TECH_LEVELS}\r\n                    selectedTech={selectedTech}\r\n                    setSelectedTech={handleTechLevelChange}\r\n                />\r\n            </div>\r\n            <div className=\"recipe-list-container\">\r\n                {filteredAndSortedRecipes.length > 0 ? (\r\n                    filteredAndSortedRecipes.map((recipe, index) => (\r\n                        <Recipe key={`${recipe.prefab}-${index}`} recipe={recipe} />\r\n                    ))\r\n                ) : (\r\n                    <div className=\"loading\">{getNoResultsMessage()}</div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecipeList;","// Function to format element names\r\nexport const formatDisplayName = (name) => {\r\n    if (!name) return ''\r\n    // Remove .tex extension, replace underscores with spaces, capitalize words\r\n    const formatted = name\r\n        .replace(/\\.tex$/, '')\r\n        .split('_')\r\n        .map(word => word ? word.charAt(0).toUpperCase() + word.slice(1) : '') // Add check for empty word after split\r\n        .join(' ');\r\n    return formatted;\r\n}; "],"names":["useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","setTimeout","clearTimeout","_ref","atlasName","displayName","tooltipContent","inventoryAtlas","useContext","AtlasContext","atlasEntry","isHovering","setIsHovering","tooltipPosition","setTooltipPosition","top","left","imageLoaded","setImageLoaded","imageDimensions","setImageDimensions","width","height","canvasRef","useRef","wrapperRef","tooltipTarget","current","document","getElementById","img","Image","u1","u2","v1","v2","pngSrc","ATLAS_IMAGE_BASE_PATH","texture","onload","drawImage","canvas","ctx","getContext","imgWidth","naturalWidth","imgHeight","naturalHeight","sx","sy","sWidth","Math","max","sHeight","clearRect","onerror","console","error","src","process","_jsxs","ref","className","style","onMouseEnter","event","rect","currentTarget","getBoundingClientRect","window","scrollY","scrollX","onMouseLeave","handleMouseLeave","children","_jsx","createPortal","recipe","recipes","findIngredientRecipe","ingredient","find","r","prefab","CroppedImage","name","ingredients","length","map","_findIngredientRecipe","_findIngredientRecipe2","display","flexDirection","gap","alignItems","amount","marginLeft","replace","techLevels","Object","keys","entries","_ref2","techLevel","level","tech","TECH_LEVELS","t","techs","selectedTech","setSelectedTech","options","label","currentValue","option","Select","onChange","classNamePrefix","isSearchable","menuPlacement","RecipeList","searchTerm","setSearchTerm","debouncedSearchTerm","filteredAndSortedRecipes","useMemo","score","bestIngredientIndex","getMatchScore","search","_recipe$ingredients","searchLower","toLowerCase","nameDisplay","formatDisplayName","prefabDisplay","bestIngredientScore","forEach","ing","index","ingName","ingPrefab","includes","modifiedRecipe","getModifiedRecipe","matchedIngredient","splice","unshift","filter","matchesFilters","matchesTechLevel","validSearch","sort","a","b","localeCompare","type","placeholder","e","target","TechLevelFilter","split","parseInt","Recipe","word","charAt","toUpperCase","slice","join"],"sourceRoot":""}