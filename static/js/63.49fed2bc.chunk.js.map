{"version":3,"file":"static/js/63.49fed2bc.chunk.js","mappings":"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","sources":["components/ResultsList.js","components/ItemSearch.js","hooks/useDebounce.js","components/CroppedImage.js","utils/formatting.js"],"sourcesContent":["import React from 'react';\r\nimport CroppedImage from './CroppedImage'; // Import the CroppedImage component\r\nimport './ResultsList.css';\r\n\r\nconst ResultsList = ({ items }) => {\r\n\r\n    // Determine the content based on loading, error, and search results\r\n    if (items.length === 0) {\r\n        return <p>No matching elements found.</p>;\r\n    }\r\n\r\n    return (\r\n        // Container for results with scrolling and styling\r\n        <div className=\"results-container\">\r\n            {items.map((el, index) => (\r\n                <CroppedImage\r\n                    key={`${el.name}-${index}`}\r\n                    atlasName={el.name}\r\n                    displayName={el.displayName}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsList; ","import React, { useState, useContext } from 'react';\r\nimport { useDebounce } from '../hooks/useDebounce';\r\nimport { AtlasContext } from '../context';\r\nimport ResultsList from './ResultsList';\r\nimport './ItemSearch.css';\r\nimport { formatDisplayName } from '../utils/formatting';\r\n\r\nconst ItemSearch = () => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const { inventoryAtlas } = useContext(AtlasContext);\r\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\r\n\r\n    // Convert inventory atlas object to array of elements\r\n    const elementData = React.useMemo(() => {\r\n        return Object.entries(inventoryAtlas).map(([name, data]) => ({\r\n            name,\r\n            displayName: formatDisplayName(name)\r\n        }));\r\n    }, [inventoryAtlas]);\r\n\r\n    // Handle search input change\r\n    const handleSearchChange = (event) => {\r\n        setSearchTerm(event.target.value);\r\n    };\r\n\r\n    // Filter elements based on search term\r\n    const filteredElements = React.useMemo(() => {\r\n        if (!debouncedSearchTerm || debouncedSearchTerm.length < 3) return [];\r\n        const searchLower = debouncedSearchTerm.toLowerCase();\r\n        return elementData.filter(el => el.name.toLowerCase().includes(searchLower));\r\n    }, [elementData, debouncedSearchTerm]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Element Search</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search elements (minimum 3 characters)...\"\r\n                value={searchTerm}\r\n                onChange={handleSearchChange}\r\n                className=\"search-input\"\r\n            />\r\n            {searchTerm.length >= 3 && (\r\n                <ResultsList items={filteredElements} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemSearch; ","import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Custom hook that debounces a value.\r\n * @param value The value to debounce.\r\n * @param delay The debounce delay in milliseconds.\r\n * @returns The debounced value.\r\n */\r\nfunction useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            // Update debounced value after the specified delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n\r\n            // Cleanup function to clear the timeout if value or delay changes\r\n            // This is how we prevent debounced value from updating if value is changed\r\n            // within the delay period. Timeout gets cleared and restarted.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport { useDebounce }; // Export the hook ","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { AtlasContext } from '../context';\r\nimport { ATLAS_IMAGE_BASE_PATH } from '../config/atlasConfig';\r\n\r\nimport './CroppedImage.css';\r\n\r\nconst CroppedImage = ({ atlasName, displayName, tooltipContent }) => {\r\n    const { inventoryAtlas } = useContext(AtlasContext);\r\n    const atlasEntry = inventoryAtlas[atlasName];\r\n    const [isHovering, setIsHovering] = useState(false);\r\n    const [tooltipPosition, setTooltipPosition] = useState({ top: 0, left: 0 });\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    const [imageDimensions, setImageDimensions] = useState({ width: 63, height: 63 });\r\n    const canvasRef = useRef(null);\r\n    const wrapperRef = useRef(null);\r\n    const tooltipTarget = useRef(null);\r\n\r\n    useEffect(() => {\r\n        tooltipTarget.current = document.getElementById('tooltip-root');\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!atlasEntry) return;\r\n\r\n        const img = new Image();\r\n        const u1 = atlasEntry.u1;\r\n        const u2 = atlasEntry.u2;\r\n        const v1 = atlasEntry.v1;\r\n        const v2 = atlasEntry.v2;\r\n        const pngSrc = `${ATLAS_IMAGE_BASE_PATH}${atlasEntry.texture}`;\r\n\r\n        const drawImage = () => {\r\n            const canvas = canvasRef.current;\r\n            if (!canvas) return;\r\n\r\n            const ctx = canvas.getContext('2d');\r\n            const imgWidth = img.naturalWidth;\r\n            const imgHeight = img.naturalHeight;\r\n            const sx = u1 * imgWidth;\r\n            const sy = (1 - v2) * imgHeight;\r\n            const sWidth = Math.max(1, (u2 - u1) * imgWidth);\r\n            const sHeight = Math.max(1, (v2 - v1) * imgHeight);\r\n\r\n            canvas.width = sWidth;\r\n            canvas.height = sHeight;\r\n            setImageDimensions({ width: sWidth, height: sHeight });\r\n\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.drawImage(\r\n                img,\r\n                sx, sy, sWidth, sHeight,\r\n                0, 0, canvas.width, canvas.height\r\n            );\r\n            setImageLoaded(true);\r\n        };\r\n\r\n        img.onload = drawImage;\r\n        img.onerror = () => {\r\n            console.error(`Failed to load image: ${pngSrc}`);\r\n            setImageLoaded(false);\r\n        };\r\n        img.src = process.env.PUBLIC_URL + pngSrc;\r\n\r\n        return () => {\r\n            img.onload = null;\r\n            img.onerror = null;\r\n        };\r\n    }, [atlasEntry]);\r\n\r\n    const handleMouseEnter = (event) => {\r\n        setIsHovering(true);\r\n        const rect = event.currentTarget.getBoundingClientRect();\r\n        setTooltipPosition({\r\n            top: rect.top + window.scrollY - 10,\r\n            left: rect.left + window.scrollX + (rect.width / 2)\r\n        });\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovering(false);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            ref={wrapperRef}\r\n            className=\"cropped-image-wrapper\"\r\n            style={{\r\n                width: `${imageDimensions.width}px`,\r\n                height: `${imageDimensions.height}px`\r\n            }}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}\r\n        >\r\n            <canvas\r\n                ref={canvasRef}\r\n                className={`cropped-image-canvas ${imageLoaded ? 'loaded' : ''}`}\r\n            />\r\n            {!imageLoaded && imageDimensions.width > 1 && (\r\n                <div className=\"loading-placeholder\"></div>\r\n            )}\r\n            {isHovering && tooltipTarget.current && createPortal(\r\n                <div className=\"image-tooltip\" style={{\r\n                    top: `${tooltipPosition.top}px`,\r\n                    left: `${tooltipPosition.left}px`,\r\n                }}>\r\n                    {tooltipContent ? tooltipContent : (displayName || 'Name missing?')}\r\n                </div>,\r\n                tooltipTarget.current\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CroppedImage;","// Function to format element names\r\nexport const formatDisplayName = (name) => {\r\n    if (!name) return ''\r\n    // Remove .tex extension, replace underscores with spaces, capitalize words\r\n    const formatted = name\r\n        .replace(/\\.tex$/, '')\r\n        .split('_')\r\n        .map(word => word ? word.charAt(0).toUpperCase() + word.slice(1) : '') // Add check for empty word after split\r\n        .join(' ');\r\n    return formatted;\r\n}; "],"names":["_ref","items","length","_jsx","children","className","map","el","index","CroppedImage","atlasName","name","displayName","ItemSearch","searchTerm","setSearchTerm","useState","inventoryAtlas","useContext","AtlasContext","debouncedSearchTerm","useDebounce","elementData","React","Object","entries","data","formatDisplayName","filteredElements","searchLower","toLowerCase","filter","includes","_jsxs","type","placeholder","value","onChange","event","target","ResultsList","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","tooltipContent","atlasEntry","isHovering","setIsHovering","tooltipPosition","setTooltipPosition","top","left","imageLoaded","setImageLoaded","imageDimensions","setImageDimensions","width","height","canvasRef","useRef","wrapperRef","tooltipTarget","current","document","getElementById","img","Image","u1","u2","v1","v2","pngSrc","ATLAS_IMAGE_BASE_PATH","texture","onload","drawImage","canvas","ctx","getContext","imgWidth","naturalWidth","imgHeight","naturalHeight","sx","sy","sWidth","Math","max","sHeight","clearRect","onerror","console","error","src","process","ref","style","onMouseEnter","rect","currentTarget","getBoundingClientRect","window","scrollY","scrollX","onMouseLeave","handleMouseLeave","createPortal","replace","split","word","charAt","toUpperCase","slice","join"],"sourceRoot":""}